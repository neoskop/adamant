{"version":3,"file":"neoskop-adamant.js.map","sources":["ng://@neoskop/adamant/utils/metadata.ts","ng://@neoskop/adamant/annotations/property.ts","ng://@neoskop/adamant/annotations/relation.ts","ng://@neoskop/adamant/annotations/belongs-to.ts","ng://@neoskop/adamant/annotations/design-doc.ts","ng://@neoskop/adamant/annotations/entity.ts","ng://@neoskop/adamant/annotations/filter.ts","ng://@neoskop/adamant/annotations/has-many.ts","ng://@neoskop/adamant/annotations/has-many-map.ts","ng://@neoskop/adamant/annotations/id.ts","ng://@neoskop/adamant/annotations/inline.ts","ng://@neoskop/adamant/annotations/inline-entity.ts","ng://@neoskop/adamant/annotations/validate-doc.ts","ng://@neoskop/adamant/annotations/view.ts","ng://@neoskop/adamant/hydrator.ts","ng://@neoskop/adamant/validator.ts","ng://@neoskop/adamant/injector-tokens.ts","ng://@neoskop/adamant/utils/marks.ts","ng://@neoskop/adamant/metadata.ts","ng://@neoskop/adamant/bulk.ts","ng://@neoskop/adamant/utils/defer.ts","ng://@neoskop/adamant/read-query-batcher.ts","ng://@neoskop/adamant/query-builder.ts","ng://@neoskop/adamant/repository.ts","ng://@neoskop/adamant/hydrator-impl.ts","ng://@neoskop/adamant/validator-impl.ts","ng://@neoskop/adamant/connection-manager.ts"],"sourcesContent":["import 'reflect-metadata';\n\nexport type Ctor<T> = Function | { new(...args : any[]) : T; prototype: T };\n\nexport const CLASS_METADATA = new WeakMap<Ctor<any>, any[]>();\nexport const PROPERTY_METADATA = new WeakMap<Ctor<any>, Map<string|symbol, any[]>>();\n\nexport function getClassMetadata<T = any>(target : Ctor<any>, type? : Ctor<T>) : T[] {\n    if(!CLASS_METADATA.has(target)) {\n        return [];\n    }\n    \n    return CLASS_METADATA.get(target)!.filter(a => !type || a instanceof type);\n}\n\nexport function pushClassMetadata(target : Ctor<any>, metadata : any) {\n    if(!CLASS_METADATA.has(target)) {\n        CLASS_METADATA.set(target, []);\n    }\n    CLASS_METADATA.get(target)!.push(metadata);\n}\n\nexport function getPropertyMetadata<T = any>(target : any, property: string | symbol, type? : Ctor<any>) : T[] {\n    if(!PROPERTY_METADATA.has(target) || !PROPERTY_METADATA.get(target)!.has(property)) {\n        return [];\n    }\n    \n    return PROPERTY_METADATA.get(target)!.get(property)!.filter(a => !type || a instanceof type);\n}\n\nexport function getAllPropertyMetadata<T = any>(target : any) : Map<string|symbol, T[]> {\n    if(!PROPERTY_METADATA.has(target)) {\n        return new Map();\n    }\n    \n    return PROPERTY_METADATA.get(target)!;\n}\n\nexport function pushPropertyMetadata(target : any, property : string | symbol, metadata : any) {\n    if(!PROPERTY_METADATA.has(target)) {\n        PROPERTY_METADATA.set(target, new Map());\n    }\n    \n    if(!PROPERTY_METADATA.get(target)!.has(property)) {\n        PROPERTY_METADATA.get(target)!.set(property, []);\n    }\n    \n    PROPERTY_METADATA.get(target)!.get(property)!.push(metadata);\n}\n\nexport function populate<T>(target : T, source : Partial<T>) : T {\n    for(const key of Object.keys(source) as (keyof T)[]) {\n        target[key] = source[key] as T[keyof T];\n    }\n    \n    return target;\n}\n","import { Ctor, populate, pushPropertyMetadata } from '../utils/metadata';\n\nexport type Type = typeof Boolean | typeof String | typeof Number | typeof Object | typeof Date | Ctor<any>;\n\nexport class PropertyMetadata {\n    type!: Type;\n    required!: boolean;\n    default?: any;\n    \n    validate(value : any, key : string | symbol) {\n        if(this.required && null == value) {\n            throw new Error(`Property \"${typeof key === 'symbol' ? Symbol.keyFor(key) : key}\" required`);\n        }\n    }\n}\n\nexport function Property(options: { type?: Type, required?: boolean, default?: any } = {}) : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new PropertyMetadata(), {\n            type: Reflect.getMetadata('design:type', target, property),\n            required: false,\n            ...options\n        }))\n    }\n}\n","import { resolveForwardRef } from '@angular/core';\nimport { Ctor } from '../utils/metadata';\nimport { PropertyMetadata } from './property';\n\nexport class RelationMetadata<T> extends PropertyMetadata {\n    required!: boolean;\n    default?: T;\n    // private _entity! : ForwardRefFn | Ctor<T>;\n    \n    set type(type : Ctor<T> /*| ForwardRefFn */) {\n        (this as any)._type = type;\n    }\n    get type() : Ctor<T> {\n        return resolveForwardRef((this as any)._type);\n    }\n    \n}\n","import { RelationMetadata } from './relation';\nimport { Ctor, populate, pushPropertyMetadata } from '../utils/metadata';\nimport { ForwardRefFn } from '@angular/core';\n\nexport class BelongsToMetadata<T> extends RelationMetadata<T> {}\n\nexport function BelongsTo<T>(options: { type?: Ctor<T>|ForwardRefFn, required?: boolean, default?: T } = {}) : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new BelongsToMetadata(), {\n            type: Reflect.getMetadata('design:type', target, property),\n            required: false,\n            ...options\n        }))\n    }\n}\n","import { Ctor, populate, pushClassMetadata } from '../utils/metadata';\n\nexport class DesignDocMetadata<T> {\n    entity!: Ctor<T>;\n    name!: string;\n}\n\ndeclare global {\n    export const emit : any;\n}\n\nexport function DesignDoc<T>(entity : Ctor<T>, name: string) : ClassDecorator {\n    return (target : Function) => {\n        pushClassMetadata(target, populate(new DesignDocMetadata<T>(), {\n            entity,\n            name\n        }));\n    }\n}\n","import { Ctor, populate, pushClassMetadata } from '../utils/metadata';\nimport { Hydrator } from '../hydrator';\nimport { Validator } from '../validator';\n\nexport class EntityMetadata {\n    name!: string;\n    attachments!: boolean;\n    hydrator?: Ctor<Hydrator>;\n    validator?: Ctor<Validator>;\n}\n\nexport function Entity(name : string, options: {\n    attachments?: boolean;\n    hydrator?: Ctor<Hydrator>;\n    validator?: Ctor<Validator>;\n} = {}) : ClassDecorator {\n    return (target : Function) => {\n        pushClassMetadata(target, populate(new EntityMetadata(), {\n            name,\n            attachments: false,\n            // hydrator: HydratorImpl,\n            // validator: ValidatorImpl,\n            ...options\n        }));\n    }\n}\n","import { populate, pushPropertyMetadata } from '../utils/metadata';\n\n\nexport class FilterMetadata {}\n\nexport function Filter() : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new FilterMetadata(), {\n        }))\n    }\n}\n","import { RelationMetadata } from './relation';\nimport { Ctor, populate, pushPropertyMetadata } from '../utils/metadata';\nimport { ForwardRefFn } from '@angular/core';\n\nexport class HasManyMetadata<T> extends RelationMetadata<T> {}\n\nexport function HasMany<T>(type: Ctor<T>|ForwardRefFn, options: { required?: boolean, default?: T } = {}) : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new HasManyMetadata(), {\n            type,\n            required: false,\n            ...options\n        }))\n    }\n}\n","import { RelationMetadata } from './relation';\nimport { Ctor, populate, pushPropertyMetadata } from '../utils/metadata';\nimport { ForwardRefFn } from '@angular/core';\n\nexport class HasManyMapMetadata<T> extends RelationMetadata<T> {}\n\nexport function HasManyMap<T>(type: Ctor<T>|ForwardRefFn, options: { required?: boolean, default?: T } = {}) : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new HasManyMapMetadata(), {\n            type,\n            required: false,\n            ...options\n        }))\n    }\n}\n","import { populate, pushPropertyMetadata } from '../utils/metadata';\nimport 'reflect-metadata';\nimport { PropertyMetadata, Type } from './property';\n\nexport enum IdStrategy {\n    Static = 'static',\n    // Uuid = 'uuid',\n    // Increment = 'increment'\n}\n\nexport class IdMetadata extends PropertyMetadata {\n    strategy!: IdStrategy;\n    readonly required = true;\n}\n\nexport function Id(options: { strategy?: IdStrategy, type?: Type } = {}) : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new IdMetadata(), {\n            strategy: IdStrategy.Static,\n            type: Reflect.getMetadata('design:type', target, property),\n            ...options\n        }))\n    }\n}\n","import { RelationMetadata } from './relation';\nimport { Ctor, populate, pushPropertyMetadata } from '../utils/metadata';\nimport { ForwardRefFn } from '@angular/core';\n\nexport class InlineMetadata<T> extends RelationMetadata<T> {}\n\nexport function Inline<T>(options: { type?: Ctor<T>|ForwardRefFn, required?: boolean, default?: T } = {}) : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new InlineMetadata(), {\n            type: Reflect.getMetadata('design:type', target, property),\n            required: false,\n            ...options\n        }))\n    }\n}\n","import { Ctor, populate, pushClassMetadata } from '../utils/metadata';\nimport { Hydrator } from '../hydrator';\nimport { Validator } from '../validator';\n\nexport class InlineEntityMetadata {\n    inline!: true;\n    hydrator?: Ctor<Hydrator>;\n    validator?: Ctor<Validator>;\n}\n\nexport function InlineEntity(options: {\n    hydrator?: Ctor<Hydrator>;\n    validator?: Ctor<Validator>;\n} = {}) : ClassDecorator {\n    return (target : Function) => {\n        pushClassMetadata(target, populate(new InlineEntityMetadata(), {\n            // hydrator: HydratorImpl,\n            // validator: ValidatorImpl,\n            ...options,\n            inline: true\n        }));\n    }\n}\n","import { populate, pushPropertyMetadata } from '../utils/metadata';\n\n\nexport class ValidateDocMetadata {}\n\nexport function ValidateDoc() : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new ValidateDocMetadata(), {\n        }))\n    }\n}\n","import { populate, pushPropertyMetadata } from '../utils/metadata';\n\n\nexport class ViewMetadata {}\n\nexport function View() : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new ViewMetadata(), {\n        }))\n    }\n}\n","import { Metadata } from './metadata';\n\nexport interface HydrateOptions {\n    depth? : number;\n    circularCache? : { [ key : string ] : any };\n}\n\nexport abstract class Hydrator {\n    abstract hydrate<T>(entity : T, data : PouchDB.Core.Document<T> & PouchDB.Core.GetMeta, metadata : Metadata<T>, options? : HydrateOptions) : Promise<T>;\n    \n    abstract dehydrate<T>(entity : T, metadata : Metadata<T>, options? : { includeRev? : boolean }) : PouchDB.Core.Document<T> & Partial<PouchDB.Core.RevisionIdMeta>;\n}\n\n\n","import { Metadata } from './metadata';\n\nexport abstract class Validator {\n    abstract validate<T>(entity : T, _metadata : Metadata<T>) : Promise<true>;\n}\n","import { Ctor } from './utils/metadata';\nimport { InjectionToken } from '@angular/core';\nimport { Metadata } from './metadata';\n\n\nexport interface EqualChecker {\n    (a : any, b : any): boolean\n}\n\nexport interface ConnectionFactory<T extends {} = {}> {\n    (name : string): PouchDB.Database<T>\n}\n\nexport interface AdamantId {\n    head(name : string) : string;\n    tail(name : string) : string;\n    build(name : string, type : typeof String | typeof Number, id : string|number) : string;\n    parse(id : string) : { name: string, type: typeof String | typeof Number, id : string | number };\n}\n\nexport const ADAMANT_CONNECTION = new InjectionToken<PouchDB.Database>('ADAMANT_CONNECTION');\nexport const ADAMANT_ENTITY_CLASS = new InjectionToken<Ctor<any>>('ADAMANT_ENTITY_CLASS');\nexport const ADAMANT_ENTITY_METADATA = new InjectionToken<Metadata<any>>('ADAMANT_ENTITY_METADATA');\nexport const ADAMANT_EQUAL_CHECKER = new InjectionToken<EqualChecker>('ADAMANT_EQUAL_CHECKER');\nexport const ADAMANT_CONNECTION_FACTORY = new InjectionToken<ConnectionFactory>('ADAMANT_CONNECTION_FACTORY');\nexport const ADAMANT_ID = new InjectionToken<AdamantId>('ADAMANT_ID');\n","export function markDeleted<T extends {}>(entity : T) : T {\n    Object.defineProperty(entity, '_deleted', { configurable: true, value: true });\n    \n    return entity;\n}\n\nexport function markIdRev<T extends {}>(entity : T, res : { id? : string, rev? : string }) : T {\n    Object.defineProperty(entity, '_id', { configurable: true, value: res.id });\n    Object.defineProperty(entity, '_rev', { configurable: true, value: res.rev });\n    \n    return entity;\n}\n","import { Ctor, getAllPropertyMetadata, getClassMetadata } from './utils/metadata';\nimport { IdMetadata, IdStrategy } from './annotations/id';\nimport { PropertyMetadata } from './annotations/property';\nimport { EntityMetadata } from './annotations/entity';\nimport { Hydrator } from './hydrator';\nimport { Validator } from './validator';\nimport { BelongsToMetadata } from './annotations/belongs-to';\nimport { HasManyMetadata } from './annotations/has-many';\nimport { HasManyMapMetadata } from './annotations/has-many-map';\nimport { InlineMetadata } from './annotations/inline';\nimport { InlineEntityMetadata } from './annotations/inline-entity';\n\nexport class Metadata<T> {\n    readonly inline: boolean = false;\n    readonly name?: string;\n    readonly attachments?: boolean;\n    readonly hydrator!: Ctor<Hydrator>;\n    readonly validator!: Ctor<Validator>;\n    \n    readonly id! : keyof T;\n    readonly idType!: typeof String | typeof Number;\n    readonly idStrategy! : IdStrategy;\n    \n    readonly properties = new Map<string | symbol, PropertyMetadata|IdMetadata|BelongsToMetadata<any>|HasManyMetadata<any>|HasManyMapMetadata<any>|InlineMetadata<any>>();\n    // readonly belongsTo = new Map<string | symbol, BelongsToMetadata<any>>();\n    // readonly hasMany = new Map<string | symbol, HasManyMetadata<any>>();\n    // readonly hasManyMap = new Map<string | symbol, HasManyMapMetadata<any>>();\n    \n    constructor(protected readonly entity : Ctor<T>) {\n        this.parse();\n        this.assert();\n    }\n    \n    protected parse() {\n        const classMetadata = getClassMetadata<EntityMetadata | InlineEntityMetadata>(this.entity);\n        const propertyMetadata = getAllPropertyMetadata<IdMetadata>(this.entity);\n        \n        for(const annotation of classMetadata) {\n            if(annotation instanceof EntityMetadata || annotation instanceof InlineEntityMetadata) {\n                Object.assign(this, annotation);\n            }\n        }\n        \n        for(const [ property, annotations ] of propertyMetadata) {\n            for(const annotation of annotations) {\n                if(annotation instanceof IdMetadata) {\n                    (this as any).id = property;\n                    (this as any).idType = annotation.type;\n                    (this as any).idStrategy = annotation.strategy;\n                }\n                \n                // if(annotation instanceof BelongsToMetadata) {\n                //     this.belongsTo.set(property, annotation);\n                // }\n                //\n                // if(annotation instanceof HasManyMetadata) {\n                //     this.hasMany.set(property, annotation);\n                // }\n                //\n                // if(annotation instanceof HasManyMapMetadata) {\n                //     this.hasManyMap.set(property, annotation);\n                // }\n                \n                if(annotation instanceof PropertyMetadata) {\n                    this.properties.set(property, annotation);\n                }\n            }\n        }\n    }\n    \n    protected assert() {\n        for(const key of ((this.inline ? [] : [ 'id', 'idStrategy', 'name', 'attachments' ]) as (keyof Metadata<T>)[])) {\n            if(null == this[key]) {\n                throw new Error(`Missing metadata '${key}' for entity \"${this.entity.name}\"`);\n            }\n        }\n    }\n}\n","import { Hydrator } from './hydrator';\nimport { Validator } from './validator';\nimport { Ctor } from './utils/metadata';\nimport { ADAMANT_CONNECTION, ADAMANT_ENTITY_CLASS, ADAMANT_ENTITY_METADATA } from './injector-tokens';\nimport { Inject } from '@angular/core';\nimport { markDeleted, markIdRev } from './utils/marks';\nimport { Metadata } from './metadata';\n\nexport enum BulkOperation {\n    Create = 'create',\n    Update = 'update',\n    Delete = 'delete'\n}\n\nexport class Bulk<T> {\n    \n    constructor(@Inject(ADAMANT_CONNECTION) protected readonly db : PouchDB.Database<T>,\n                @Inject(ADAMANT_ENTITY_CLASS) protected readonly entityClass : Ctor<T>,\n                @Inject(ADAMANT_ENTITY_METADATA) protected readonly metadata : Metadata<T>,\n                protected readonly hydrator : Hydrator,\n                protected readonly validator : Validator) {}\n    \n    protected async bulk(entities : T[], operation : BulkOperation) : Promise<T[]> {\n        if(0 === entities.length) {\n            return entities;\n        }\n        \n        const docs = await Promise.all(entities.map(async entity => {\n            if(!(entity instanceof this.entityClass)) {\n                throw new Error(`Entity \"${entity}\" is not instanceof ${this.entityClass.name}`);\n            }\n    \n            await this.validator.validate(entity, this.metadata);\n    \n            const doc : PouchDB.Core.ChangesMeta & PouchDB.Core.Document<T> = this.hydrator.dehydrate(entity, this.metadata, { includeRev: operation === BulkOperation.Update || operation === BulkOperation.Delete });\n            if(operation === BulkOperation.Delete) {\n                doc._deleted = true;\n            }\n            return doc;\n        }));\n        \n        const result = await this.db.bulkDocs(docs);\n        const errors : PouchDB.Core.Error[] = result.filter(r => Object.prototype.hasOwnProperty.call(r, 'error'));\n        \n        if(0 < errors.length) {\n            throw errors;\n        }\n        \n        result.forEach((res, index) => {\n            if(operation === BulkOperation.Delete) {\n                markDeleted(entities[index]);\n            }\n            markIdRev(entities[index], res);\n        });\n        \n        return entities;\n    }\n    \n    create(entities : T[]) : Promise<T[]> {\n        return this.bulk(entities, BulkOperation.Create);\n    }\n    \n    update(entities : T[]) : Promise<T[]> {\n        return this.bulk(entities, BulkOperation.Update);\n    }\n    \n    delete(entities : T[]) : Promise<T[]> {\n        return this.bulk(entities, BulkOperation.Delete);\n    }\n}\n","export type Deffered<T> = Promise<T> & { resolve(v : T) : void, reject(e : any) : void };\n\nexport function defer<T>() : Deffered<T> {\n    let resolve : any , reject : any, promise = new Promise<T>((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n    \n    return Object.assign(promise, { resolve, reject });\n}\n","import { defer, Deffered } from './utils/defer';\n\nexport class ReadQueryBatcher {\n    queue : string[] = [];\n    deffered? : Deffered<PouchDB.Core.Document<any>[]>;\n    \n    constructor(protected readonly db : PouchDB.Database) {}\n    \n    read<T>(keys : string[]) : Promise<PouchDB.Core.Document<T>[]> {\n        this.queue.push(...keys);\n        \n        return this.schedule<T>().then(docs => {\n            return keys\n                .map(key => docs.find(doc => doc._id === key))\n                .filter(Boolean)\n                .map(doc => JSON.parse(JSON.stringify(doc)));\n        });\n    }\n    \n    protected schedule<T>() : Deffered<PouchDB.Core.Document<T>[]> {\n        if(!this.deffered) {\n            setImmediate(() => {\n                this.execute();\n            });\n            this.deffered = defer();\n            this.deffered.then(() => {\n                delete this.deffered\n            }, () => {\n                delete this.deffered\n            });\n        }\n        \n        return this.deffered;\n    }\n    \n    protected async execute() {\n        const keys = this.queue.filter((v, i, a) => i === a.indexOf(v));\n        this.queue = [];\n        \n        try {\n            const { rows } = await this.db.allDocs({\n                include_docs: true,\n                keys\n            });\n            \n            this.deffered!.resolve(rows.map(r => r.doc).filter(Boolean));\n        } catch(e) {\n            this.deffered!.reject(e);\n        }\n    }\n}\n","import { AdamantRepository } from './repository';\nimport { HydrateOptions } from './hydrator';\n\nexport class QueryBuilder<T> {\n    \n    protected _selector : PouchDB.Find.Selector = {};\n    protected _sort : Array<string|{[propName: string]: 'asc' | 'desc'}> = [];\n    protected _limit? : number;\n    protected _skip? : number;\n    \n    constructor(protected readonly repository : AdamantRepository<T>, head : string, tail : string) {\n        this._selector._id = {\n            $gt: head,\n            $lt: tail\n        }\n    }\n    \n    selector(field : string, condition : PouchDB.Find.Selector | PouchDB.Find.ConditionOperators | string | number | boolean) : this;\n    selector(selector : PouchDB.Find.Selector) : this;\n    selector(fieldOrSelector : string|PouchDB.Find.Selector, condition? : PouchDB.Find.Selector | PouchDB.Find.ConditionOperators | string | number | boolean) : this {\n        if(typeof fieldOrSelector === 'string') {\n            if(typeof condition !== 'object') {\n                condition = {\n                    $eq: condition\n                }\n            }\n            if(fieldOrSelector in this._selector) {\n                \n                Object.assign(this._selector[ fieldOrSelector ], condition)\n            } else {\n                this._selector[ fieldOrSelector ] = condition;\n            }\n        } else {\n            for(let key in fieldOrSelector) {\n                this.selector(key, fieldOrSelector[key]);\n            }\n        }\n        return this;\n    }\n    \n    sort(property : string, direction? : 'asc' | 'desc') : this;\n    sort(sort : { [propName: string]: 'asc' | 'desc' }) : this;\n    sort(propertyOrSort : string|{ [propName: string]: 'asc' | 'desc' }, direction? : 'asc' | 'desc') : this {\n        if(typeof propertyOrSort === 'string' && direction) {\n            this._sort.push({ [propertyOrSort]: direction });\n        } else {\n            this._sort.push(propertyOrSort);\n        }\n        return this;\n    }\n    \n    limit(limit : number) : this {\n        this._limit = limit;\n        return this;\n    }\n    \n    skip(skip : number) : this {\n        this._skip = skip;\n        return this;\n    }\n    \n    resolve(options?: HydrateOptions) : Promise<T[]> {\n        return this.repository.executeQuery(this, options);\n    }\n    \n    toFindRequest() {\n        const req : PouchDB.Find.FindRequest<T> = {\n            selector: this._selector\n        };\n        \n        if(0 < this._sort.length) {\n            req.sort = this._sort;\n        }\n        \n        if(this._limit != null) {\n            req.limit = this._limit;\n        }\n        \n        if(this._skip != null) {\n            req.skip = this._skip;\n        }\n        \n        return req;\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Validator } from './validator';\nimport { Ctor, getAllPropertyMetadata, getClassMetadata, getPropertyMetadata, populate } from './utils/metadata';\nimport { HydrateOptions, Hydrator } from './hydrator';\nimport { Metadata } from './metadata';\nimport { Bulk } from './bulk';\nimport { markDeleted, markIdRev } from './utils/marks';\nimport * as equal from 'fast-deep-equal';\nimport { ReadQueryBatcher } from './read-query-batcher';\nimport { QueryBuilder } from './query-builder';\nimport { DesignDocMetadata } from './annotations/design-doc';\nimport { ViewMetadata } from './annotations/view';\nimport { FilterMetadata } from './annotations/filter';\nimport { ValidateDocMetadata } from './annotations/validate-doc';\nimport {\n    ADAMANT_CONNECTION,\n    ADAMANT_ENTITY_CLASS,\n    ADAMANT_ENTITY_METADATA,\n    ADAMANT_EQUAL_CHECKER,\n    ADAMANT_ID,\n    AdamantId,\n    EqualChecker\n} from './injector-tokens';\n\n\nexport function equalCheckerFactory() {\n    return equal;\n}\n\n\n@Injectable()\nexport class AdamantRepository<T> {\n    protected readonly queryBatcher = new ReadQueryBatcher(this.db);\n    \n    constructor(@Inject(ADAMANT_CONNECTION) protected readonly db : PouchDB.Database<T>,\n                @Inject(ADAMANT_ENTITY_CLASS) protected readonly entityClass : Ctor<T>,\n                @Inject(ADAMANT_ENTITY_METADATA) protected readonly metadata : Metadata<T>,\n                @Inject(ADAMANT_EQUAL_CHECKER) protected readonly equal : EqualChecker,\n                @Inject(ADAMANT_ID) protected readonly id : AdamantId,\n                public readonly bulk : Bulk<T>,\n                public readonly hydrator : Hydrator,\n                public readonly validator : Validator) {\n    }\n    \n    async create(entity : T) : Promise<T> {\n        await this.validator.validate(entity, this.metadata);\n        \n        const doc = this.hydrator.dehydrate(entity, this.metadata);\n        \n        const result = await this.db.put(doc);\n        \n        markIdRev(entity, result);\n        \n        return entity;\n    }\n    \n    async upsert(entity : T) : Promise<T> {\n        await this.validator.validate(entity, this.metadata);\n        \n        const doc = this.hydrator.dehydrate(entity, this.metadata);\n        \n        const result = await this._upsert(this.id.build(this.metadata.name!, this.metadata.idType, entity[ this.metadata.id ] as any), doc);\n        \n        markIdRev(entity, result);\n        \n        return entity;\n    }\n    \n    /** @internal */\n    _upsert(id : string, document : PouchDB.Core.Document<T> & Partial<PouchDB.Core.RevisionIdMeta>) : Promise<PouchDB.UpsertResponse> {\n        return this.db.upsert(id, existingDoc => {\n            const { _id: _1, _rev: _2, ...d1 } = document as any;\n            const { _id: _3, _rev: _4, ...d2 } = existingDoc as any;\n            \n            if(this.equal(d1, d2)) {\n                return false;\n            }\n            \n            return document;\n        })\n    }\n    \n    async update(entity : T) : Promise<T> {\n        await this.validator.validate(entity, this.metadata);\n        \n        const doc = this.hydrator.dehydrate(entity, this.metadata, { includeRev: true });\n        \n        const result = await this.db.put(doc);\n        \n        markIdRev(entity, result);\n        \n        return entity;\n    }\n    \n    async delete(entity : T) : Promise<T> {\n        await this.validator.validate(entity, this.metadata);\n        \n        const doc : PouchDB.Core.Document<T> & Partial<PouchDB.Core.RevisionIdMeta> & PouchDB.Core.ChangesMeta = this.hydrator.dehydrate(entity, this.metadata, { includeRev: true });\n        \n        doc._deleted = true;\n        \n        const result = await this.db.put(doc);\n        \n        markIdRev(entity, result);\n        markDeleted(entity);\n        \n        return entity;\n    }\n    \n    read(id : number | string, options? : HydrateOptions) {\n        return this._read(this.id.build(this.metadata.name!, this.metadata.idType, id), options);\n    }\n    \n    /** @internal */\n    async _read(id : string, options? : HydrateOptions) {\n        return this.hydrator.hydrate(Object.create(this.entityClass.prototype), await this._readRaw(id), this.metadata, options);\n    }\n    \n    /** @internal */\n    async _readRaw(id : string) : Promise<PouchDB.Core.Document<T>> {\n        const result = await this.queryBatcher.read<T>([ id ]);\n        if(!result[ 0 ]) {\n            throw {\n                status : 404,\n                name   : 'not_found',\n                message: 'missing',\n                reason : 'missing',\n                id\n            }\n        }\n        \n        return result[ 0 ];\n    }\n    \n    async readAll(ids? : (string | number)[], options? : HydrateOptions) {\n        const opt : PouchDB.Core.AllDocsWithKeysOptions & PouchDB.Core.AllDocsWithinRangeOptions = {\n            include_docs: true\n        } as any;\n        \n        if(ids) {\n            opt.keys = ids.map(id => this.id.build(this.metadata.name!, this.metadata.idType, id)).sort((a, b) => a.localeCompare(b));\n        } else {\n            opt.startkey = this.id.head(this.metadata.name!);\n            opt.endkey = this.id.tail(this.metadata.name!);\n        }\n        \n        return this._readAll(opt, options);\n    }\n    \n    /** @internal */\n    async _readAll(opt : PouchDB.Core.AllDocsWithKeysOptions | PouchDB.Core.AllDocsWithinRangeOptions, options? : HydrateOptions) {\n        return await Promise.all((await this._readAllRaw(opt))\n            .map(async doc => this.hydrator.hydrate(Object.create(this.entityClass.prototype), doc, this.metadata, options))\n        )\n    }\n    \n    /** @internal */\n    async _readAllRaw(opt : PouchDB.Core.AllDocsWithKeysOptions | PouchDB.Core.AllDocsWithinRangeOptions) : Promise<PouchDB.Core.Document<T>[]> {\n        if(opt.include_docs && 'keys' in opt) {\n            return await this.queryBatcher.read<T>(opt.keys);\n        }\n        \n        return (await this.db.allDocs<T>(opt)).rows.map(r => r.doc!).filter(Boolean);\n    }\n    \n    query() : QueryBuilder<T> {\n        return new QueryBuilder<T>(this, this.id.head(this.metadata.name!), this.id.tail(this.metadata.name!));\n    }\n    \n    async executeQuery(query : QueryBuilder<T>, options? : HydrateOptions) {\n        return await Promise.all((await this.db.find(query.toFindRequest())).docs\n            .map(async doc => this.hydrator.hydrate(Object.create(this.entityClass.prototype), doc, this.metadata, options))\n        )\n    }\n    \n    build(props : Partial<T> = {}) : T {\n        return populate(Object.create(this.entityClass.prototype), props);\n    }\n    \n    async persistDesignDoc<T extends {}>(doc : T) : Promise<void> {\n        const classAnnotations = getClassMetadata(doc.constructor, DesignDocMetadata);\n        const propertyAnnotations = getAllPropertyMetadata<ViewMetadata | FilterMetadata | ValidateDocMetadata>(doc.constructor);\n        \n        if(1 !== classAnnotations.length) {\n            throw new Error(`Design doc annotation required`);\n        }\n        \n        if(classAnnotations[ 0 ].entity !== this.entityClass) {\n            throw new Error(`Invalid design doc entity`);\n        }\n        \n        let document : {\n            _id : string;\n            views : { [ key : string ] : { map : string, reduce? : string } };\n            filters : { [ key : string ] : string };\n            validate_doc_update? : string;\n        } = {\n            _id    : `_design/${classAnnotations[ 0 ].name}`,\n            views  : {},\n            filters: {}\n        };\n        \n        for(const [ property, annotations ] of propertyAnnotations) {\n            for(const annotation of annotations) {\n                if(annotation instanceof ViewMetadata) {\n                    const value : any = doc[ property as keyof T ];\n                    const type = typeof value;\n                    \n                    if(type === 'string' || type === 'function') {\n                        document.views[ property as string ] = {\n                            map: value.toString()\n                        };\n                    } else if(type === 'object') {\n                        document.views[ property as string ] = {\n                            map   : value.map.toString(),\n                            reduce: value.reduce && value.reduce.toString()\n                        };\n                    }\n                } else if(annotation instanceof FilterMetadata) {\n                    document.filters[ property as string ] = doc[ property as keyof T ].toString();\n                } else if(annotation instanceof ValidateDocMetadata) {\n                    document.validate_doc_update = doc[ property as keyof T ].toString();\n                }\n            }\n        }\n        \n        await this.db.upsert<any>(document._id, existingDoc => {\n            const { _id: _1, _rev: _2, ...d1 } = document as any;\n            const { _id: _3, _rev: _4, ...d2 } = existingDoc as any;\n            \n            if(this.equal(d1, d2)) {\n                return false;\n            }\n            \n            return document;\n        });\n    }\n    \n    async view<T, P extends keyof T>(designDoc : Ctor<T>, name : P, { depth, circularCache, ...options } : HydrateOptions & PouchDB.Query.Options<T, any> = {}) {\n        const classAnnotation = getClassMetadata(designDoc, DesignDocMetadata)[ 0 ];\n        \n        if(!classAnnotation) {\n            throw new Error(`Design doc annotation required`);\n        }\n        \n        if(classAnnotation.entity !== this.entityClass) {\n            throw new Error(`Invalid design doc entity`);\n        }\n        \n        const propertyAnnotation = getPropertyMetadata(designDoc, name as string, ViewMetadata);\n        \n        if(!propertyAnnotation) {\n            throw new Error(`Unknown view \"${name}\"`);\n        }\n        \n        if(!options) {\n            options = {}\n        }\n        options.include_docs = true;\n        \n        return await Promise.all((await this.rawView(`${classAnnotation.name}/${name}`, options))\n            .rows.map(row => row.doc!)\n            .map(async doc => this.hydrator.hydrate(Object.create(this.entityClass.prototype), doc, this.metadata, {\n                depth,\n                circularCache\n            }))\n        )\n    }\n    \n    rawView<R = T>(name : string, options? : PouchDB.Query.Options<R, any>) {\n        return this.db.query(name, options);\n    }\n}\n","import { PropertyMetadata, Type } from './annotations/property';\nimport { InlineMetadata } from './annotations/inline';\nimport { HasManyMapMetadata } from './annotations/has-many-map';\nimport { markIdRev } from './utils/marks';\nimport { HydrateOptions, Hydrator } from './hydrator';\nimport { AdamantRepository } from './repository';\nimport { RelationMetadata } from './annotations/relation';\nimport { AdamantConnectionManager } from './connection-manager';\nimport { HasManyMetadata } from './annotations/has-many';\nimport { Metadata } from './metadata';\nimport { BelongsToMetadata } from './annotations/belongs-to';\nimport { IdMetadata } from './annotations/id';\nimport { Inject, Injectable } from '@angular/core';\nimport { ADAMANT_ID, AdamantId } from './injector-tokens';\n\n@Injectable()\nexport class HydratorImpl extends Hydrator {\n    constructor(@Inject(ADAMANT_ID) protected readonly id : AdamantId,\n                protected readonly connectionManager : AdamantConnectionManager) {\n        super();\n    }\n    \n    dehydrate<T>(entity : T, metadata : Metadata<T>, options? : { includeRev? : boolean }) : PouchDB.Core.Document<T> & Partial<PouchDB.Core.RevisionIdMeta> {\n        const doc : any = {};\n        \n        if(options && options.includeRev) {\n            doc._rev = (entity as any)._rev;\n        }\n        \n        if(metadata.attachments && (entity as any)._attachments) {\n            doc._attachments = (entity as any)._attachments;\n        }\n        \n        for(const [ property, annotation ] of metadata.properties) {\n            const value : any = entity[ property as keyof T ];\n            if(annotation instanceof RelationMetadata) {\n                if(value != null) {\n                    const relationMetadata = this.connectionManager.getMetadata(annotation.type);\n                    \n                    if(annotation instanceof BelongsToMetadata) {\n                        doc[ property ] = relationToId(value, relationMetadata, this.id);\n                    } else if(annotation instanceof HasManyMetadata) {\n                        doc[ property ] = (value as any[]).map(rel => relationToId(rel, relationMetadata, this.id));\n                    } else if(annotation instanceof HasManyMapMetadata) {\n                        const rel : any = {};\n                        for(const key in value) {\n                            rel[ key ] = relationToId(value[ key ], relationMetadata, this.id);\n                        }\n                        doc[ property ] = rel;\n                    } else if(annotation instanceof InlineMetadata) {\n                        doc[ property ] = this.connectionManager.getRepository(annotation.type).hydrator.dehydrate(value, relationMetadata);\n                    }\n                }\n            } else if(annotation instanceof PropertyMetadata) {\n                doc[ property ] = value;\n                \n                if(annotation instanceof IdMetadata) {\n                    doc._id = this.id.build(metadata.name!, metadata.idType, value as any);\n                }\n            }\n            \n            if(undefined === doc[ property ]) {\n                delete doc[ property ];\n            }\n        }\n        \n        return doc as PouchDB.Core.Document<T> & Partial<PouchDB.Core.RevisionIdMeta>;\n    }\n    \n    async hydrate<T extends {}>(entity : T, data : PouchDB.Core.Document<T> & PouchDB.Core.GetMeta, metadata : Metadata<T>, { depth = Infinity, circularCache = {} } : HydrateOptions = {}) : Promise<T> {\n        if(data._id in circularCache) {\n            return circularCache[ data._id ];\n        }\n        \n        circularCache[ data._id ] = entity;\n        \n        markIdRev(entity, { id: data._id, rev: data._rev });\n        \n        if(metadata.attachments) {\n            Object.defineProperty(entity, '_attachments', { configurable: true, value: data._attachments });\n        }\n        \n        for(const [ property, annotation ] of metadata.properties) {\n            const value : any = data[ property as keyof T ];\n            if(null == value) {\n                entity[ property as keyof T ] = null!;\n            } else {\n                if(annotation instanceof RelationMetadata) {\n                    const relationMetadata = this.connectionManager.getMetadata(annotation.type);\n                    const relationRepository = this.connectionManager.getRepository(annotation.type);\n                    \n                    if(annotation instanceof BelongsToMetadata) {\n                        entity[ property as keyof T ] = circularCache.hasOwnProperty(value) ? circularCache[value] : await relationRepository\n                            ._read(value, {\n                                depth: depth - 1,\n                                circularCache\n                            });\n                    } else if(annotation instanceof HasManyMetadata) {\n                        entity[ property as keyof T ] = await readAllWithCircularCache(relationRepository, value, depth - 1, circularCache) as any;\n                        \n                    } else if(annotation instanceof HasManyMapMetadata) {\n                        const keys = Object.keys(value);\n                        const values = keys.map(k => value[ k ]);\n                        \n                        const entities = await readAllWithCircularCache(relationRepository, values, depth - 1, circularCache);\n                        const rel : any = {};\n                        for(const key of keys) {\n                            rel[ key ] = entities.find(e => e._id === value[ key ]);\n                        }\n                        entity[ property as keyof T ] = rel;\n                    } else if(annotation instanceof InlineMetadata) {\n                        entity[ property as keyof T ] = await relationRepository\n                            .hydrator.hydrate(relationRepository.build(), value, relationMetadata)\n                    }\n                } else if(annotation instanceof PropertyMetadata) {\n                    const descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(entity), property);\n                    if(!descriptor || descriptor.writable || descriptor.set) {\n                        entity[ property as keyof T ] = unpack(value, annotation.type);\n                    }\n                }\n            }\n        }\n        \n        return entity;\n    }\n}\n\nasync function readAllWithCircularCache<T>(repo : AdamantRepository<T>, keys : string[], depth : number, circularCache : { [ key : string ] : any }) : Promise<T[]> {\n    const filteredKeys = keys.filter(k => !circularCache.hasOwnProperty(k));\n    let fromDb : T[];\n    \n    if(filteredKeys.length) {\n        fromDb = await repo._readAll({ keys: filteredKeys, include_docs: true }, { depth, circularCache });\n    }\n    \n    return keys.map(key => {\n        if(circularCache.hasOwnProperty(key)) {\n            return circularCache[key];\n        }\n        \n        return fromDb && fromDb.find(e => (e as any)._id === key);\n    })\n}\n\nfunction relationToId<T>(rel : string | T, metadata : Metadata<T>, id : AdamantId) : string {\n    return typeof rel === 'string'\n        ? rel\n        : id.build(metadata.name!, metadata.idType, rel[ metadata.id ] as any)\n}\n\nfunction unpack(value : any, type : Type) : any {\n    if(type === Date && value) {\n        return new Date(value);\n    }\n    \n    return value;\n}\n","import { Validator } from './validator';\nimport { Metadata } from './metadata';\n\nexport class ValidatorImpl extends Validator {\n    async validate<T>(entity : T, metadata : Metadata<T>) : Promise<true> {\n        for(const [ property, annotation ] of metadata.properties) {\n            await annotation.validate(entity[property as keyof T], property);\n        }\n        \n        return true;\n    }\n    \n}\n","import { Inject, Injectable, Injector } from '@angular/core';\nimport {\n    AdamantRepository, equalCheckerFactory\n} from './repository';\nimport { Ctor } from './utils/metadata';\nimport { Metadata } from './metadata';\nimport { Bulk } from './bulk';\nimport { Hydrator } from './hydrator';\nimport { Validator } from './validator';\nimport { HydratorImpl } from './hydrator-impl';\nimport { ValidatorImpl } from './validator-impl';\nimport {\n    ADAMANT_CONNECTION,\n    ADAMANT_CONNECTION_FACTORY, ADAMANT_ENTITY_CLASS, ADAMANT_ENTITY_METADATA,\n    ADAMANT_EQUAL_CHECKER,\n    ADAMANT_ID,\n    AdamantId,\n    ConnectionFactory\n} from './injector-tokens';\n\n\n\nexport function adamantIdFactory() : AdamantId {\n    return {\n        head(name : string) {\n            return `${name}_0`\n        },\n        tail(name : string) {\n            return `${name}_9`\n        },\n        build(name : string, type : typeof String | typeof Number, id : string|number) : string {\n            if(type === String) {\n                return `${name}_2_${id}`;\n            } else if(type === Number) {\n                const idStr = id.toString();\n                return `${name}_1_${'0'.repeat(16 - idStr.length)}${idStr}`;\n            }\n            throw new Error(`Invalid id type \"${type}\"`);\n        },\n        parse(id : string) : { name: string, type: typeof String | typeof Number, id : string | number } {\n            const match = /^(.*)_(1|2)_(.*)$/.exec(id);\n            \n            if(!match) {\n                throw new TypeError(`Invalid id \"${id}\"`);\n            }\n            \n            return {\n                name: match[1]!,\n                type: match[2] === '2' ? String : Number,\n                id: match[2] === '2' ? match[3] : Number.parseInt(match[3], 10)\n            };\n        }\n    }\n}\n\n\nexport function createAdamantConnection(factory : ConnectionFactory) : AdamantConnectionManager {\n    const injector = Injector.create({\n        providers: [\n            { provide: ADAMANT_CONNECTION_FACTORY, useValue: factory },\n            { provide: AdamantConnectionManager, deps: [ ADAMANT_CONNECTION_FACTORY, ADAMANT_ID, Injector ] },\n            { provide: ADAMANT_ID, useFactory: adamantIdFactory, deps: [] },\n            { provide: ADAMANT_EQUAL_CHECKER, useFactory: equalCheckerFactory, deps: [] }\n        ]\n    });\n\n    return injector.get(AdamantConnectionManager);\n}\n\n@Injectable()\nexport class AdamantConnectionManager {\n    \n    protected readonly connections = new Map<string, PouchDB.Database<any>>();\n    protected readonly repositories = new Map<Ctor<any>, AdamantRepository<any>>();\n    protected readonly metadata = new Map<Ctor<any>, Metadata<any>>();\n    \n    constructor(@Inject(ADAMANT_CONNECTION_FACTORY) protected readonly connectionFactory : ConnectionFactory,\n                @Inject(ADAMANT_ID) public readonly id : AdamantId,\n                protected readonly injector : Injector) {}\n    \n    getOpenConnections() : PouchDB.Database[] {\n        return Array.from(this.connections.values());\n    }\n    \n    getConnection<T extends {} = {}>(name : string) : PouchDB.Database<T> {\n        if(!this.connections.has(name)) {\n            this.connections.set(name, this.createConnection(name));\n        }\n        \n        return this.connections.get(name)!;\n    }\n    \n    clearConnections() {\n        this.connections.clear();\n    }\n    \n    protected createConnection(name : string) : PouchDB.Database {\n        return this.connectionFactory(name);\n    }\n    \n    getRepository<T>(entityClass : Ctor<T>) : AdamantRepository<T> {\n        if(!this.repositories.has(entityClass)) {\n            this.repositories.set(entityClass, this.createRepository(entityClass));\n        }\n        \n        return this.repositories.get(entityClass)!;\n    }\n    \n    protected createRepository<T>(entityClass : Ctor<T>) : AdamantRepository<T> {\n        const metadata = this.getMetadata(entityClass);\n        \n        return Injector.create({\n            parent: this.injector,\n            providers: [\n                { provide: AdamantConnectionManager, useValue: this },\n                { provide: AdamantRepository, deps: [ ADAMANT_CONNECTION, ADAMANT_ENTITY_CLASS, ADAMANT_ENTITY_METADATA, ADAMANT_EQUAL_CHECKER, ADAMANT_ID, Bulk, Hydrator, Validator] },\n                { provide: ADAMANT_ENTITY_CLASS, useValue: entityClass },\n                { provide: ADAMANT_ENTITY_METADATA, useValue: metadata, },\n                { provide: ADAMANT_CONNECTION, useValue: !metadata.inline ? this.getConnection(metadata.name!) : null },\n                { provide: HydratorImpl, deps: [ ADAMANT_ID, AdamantConnectionManager] },\n                { provide: ValidatorImpl, deps: [] },\n                { provide: Hydrator, useExisting: metadata.hydrator || HydratorImpl },\n                { provide: Validator, useExisting: metadata.validator || ValidatorImpl },\n                { provide: Bulk, deps: [ ADAMANT_CONNECTION, ADAMANT_ENTITY_CLASS, ADAMANT_ENTITY_METADATA, Hydrator, Validator ] }\n            ]\n        }).get<AdamantRepository<T>>(AdamantRepository);\n    }\n    \n    getMetadata<T>(entityClass : Ctor<T>) : Metadata<T> {\n        if(!this.metadata.has(entityClass)) {\n            this.metadata.set(entityClass, this.createMetadata(entityClass));\n        }\n        \n        return this.metadata.get(entityClass)!;\n    }\n    \n    protected createMetadata<T>(entityClass : Ctor<T>) : Metadata<T> {\n        return new Metadata<T>(entityClass);\n    }\n}\n"],"names":["equal"],"mappings":"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"}
