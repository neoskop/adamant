{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://@neoskop/adamant/utils/metadata.ts","ng://@neoskop/adamant/annotations/property.ts","ng://@neoskop/adamant/annotations/relation.ts","ng://@neoskop/adamant/annotations/belongs-to.ts","ng://@neoskop/adamant/annotations/design-doc.ts","ng://@neoskop/adamant/annotations/entity.ts","ng://@neoskop/adamant/annotations/filter.ts","ng://@neoskop/adamant/annotations/has-many.ts","ng://@neoskop/adamant/annotations/has-many-map.ts","ng://@neoskop/adamant/annotations/id.ts","ng://@neoskop/adamant/annotations/inline.ts","ng://@neoskop/adamant/annotations/inline-entity.ts","ng://@neoskop/adamant/annotations/validate-doc.ts","ng://@neoskop/adamant/annotations/view.ts","ng://@neoskop/adamant/hydrator.ts","ng://@neoskop/adamant/validator.ts","ng://@neoskop/adamant/injector-tokens.ts","ng://@neoskop/adamant/utils/marks.ts","ng://@neoskop/adamant/metadata.ts","ng://@neoskop/adamant/bulk.ts","ng://@neoskop/adamant/read-query-batcher.ts","ng://@neoskop/adamant/utils/defer.ts","ng://@neoskop/adamant/query-builder.ts","ng://@neoskop/adamant/repository.ts","ng://@neoskop/adamant/hydrator-impl.ts","ng://@neoskop/adamant/validator-impl.ts","ng://@neoskop/adamant/connection-manager.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__assign","assign","t","s","i","n","arguments","length","call","apply","__rest","e","indexOf","getOwnPropertySymbols","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__values","o","m","__read","r","ar","error","CLASS_METADATA","WeakMap","PROPERTY_METADATA","getClassMetadata","target","type","has","get","filter","a","pushClassMetadata","metadata","set","getAllPropertyMetadata","Map","pushPropertyMetadata","property","populate","source","_b","keys","_c","key","PropertyMetadata","validate","required","Error","keyFor","RelationMetadata","_super","tslib_1.__extends","defineProperty","resolveForwardRef","_type","BelongsToMetadata","DesignDocMetadata","EntityMetadata","FilterMetadata","HasManyMetadata","HasManyMapMetadata","Static","IdMetadata","InlineMetadata","InlineEntityMetadata","ValidateDocMetadata","ViewMetadata","Hydrator","Validator","ADAMANT_CONNECTION","InjectionToken","ADAMANT_ENTITY_CLASS","ADAMANT_ENTITY_METADATA","ADAMANT_EQUAL_CHECKER","ADAMANT_CONNECTION_FACTORY","ADAMANT_ID","markDeleted","entity","configurable","markIdRev","res","id","rev","Metadata","parse","assert","classMetadata","propertyMetadata","classMetadata_1","tslib_1.__values","classMetadata_1_1","annotation","propertyMetadata_1","propertyMetadata_1_1","_d","annotations","annotations_1","annotations_1_1","idType","idStrategy","strategy","properties","inline","name","Create","Update","Delete","Bulk","db","entityClass","hydrator","validator","bulk","entities","operation","all","map","_a","doc","dehydrate","includeRev","BulkOperation","_deleted","docs","bulkDocs","errors","forEach","index","update","delete","Inject","args","decorators","ReadQueryBatcher","read","queue","__spread","concat","schedule","find","_id","Boolean","JSON","stringify","_this","deffered","setImmediate","execute","defer","promise","rej","allDocs","include_docs","rows","e_1","QueryBuilder","repository","head","tail","_selector","$gt","$lt","selector","fieldOrSelector","condition","$eq","sort","propertyOrSort","direction","_sort","limit","_limit","skip","_skip","options","executeQuery","toFindRequest","req","equalCheckerFactory","equal","AdamantRepository","put","upsert","_upsert","build","document","existingDoc","d1","_rev","d2","_read","hydrate","_readRaw","queryBatcher","status","message","reason","readAll","ids","opt","localeCompare","startkey","endkey","_readAll","_readAllRaw","query","props","persistDesignDoc","classAnnotations","propertyAnnotations","views","filters","propertyAnnotations_1","propertyAnnotations_1_1","toString","reduce","validate_doc_update","view","designDoc","depth","circularCache","classAnnotation","getPropertyMetadata","rawView","row","Injectable","HydratorImpl","connectionManager","attachments","_attachments","relationMetadata_1","this_1","getMetadata","relationToId","rel","getRepository","undefined","data","Infinity","relationMetadata","this_2","relationRepository","_j","_e","readAllWithCircularCache","_f","values","k","keys_1","keys_1_1","_g","_h","descriptor","getOwnPropertyDescriptor","getPrototypeOf","writable","unpack","Date","AdamantConnectionManager","repo","filteredKeys","fromDb","ValidatorImpl","adamantIdFactory","String","Number","idStr","repeat","match","exec","parseInt","connectionFactory","injector","getOpenConnections","from","connections","getConnection","createConnection","clearConnections","clear","repositories","createRepository","Injector","parent","providers","provide","useValue","deps","useExisting","createMetadata","BelongsTo","Reflect","DesignDoc","Entity","Filter","HasMany","HasManyMap","Id","IdStrategy","Inline","InlineEntity","Property","ValidateDoc","View","createAdamantConnection","factory","useFactory"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import 'reflect-metadata';\n\nexport type Ctor<T> = Function | { new(...args : any[]) : T; prototype: T };\n\nexport const CLASS_METADATA = new WeakMap<Ctor<any>, any[]>();\nexport const PROPERTY_METADATA = new WeakMap<Ctor<any>, Map<string|symbol, any[]>>();\n\nexport function getClassMetadata<T = any>(target : Ctor<any>, type? : Ctor<T>) : T[] {\n    if(!CLASS_METADATA.has(target)) {\n        return [];\n    }\n    \n    return CLASS_METADATA.get(target)!.filter(a => !type || a instanceof type);\n}\n\nexport function pushClassMetadata(target : Ctor<any>, metadata : any) {\n    if(!CLASS_METADATA.has(target)) {\n        CLASS_METADATA.set(target, []);\n    }\n    CLASS_METADATA.get(target)!.push(metadata);\n}\n\nexport function getPropertyMetadata<T = any>(target : any, property: string | symbol, type? : Ctor<any>) : T[] {\n    if(!PROPERTY_METADATA.has(target) || !PROPERTY_METADATA.get(target)!.has(property)) {\n        return [];\n    }\n    \n    return PROPERTY_METADATA.get(target)!.get(property)!.filter(a => !type || a instanceof type);\n}\n\nexport function getAllPropertyMetadata<T = any>(target : any) : Map<string|symbol, T[]> {\n    if(!PROPERTY_METADATA.has(target)) {\n        return new Map();\n    }\n    \n    return PROPERTY_METADATA.get(target)!;\n}\n\nexport function pushPropertyMetadata(target : any, property : string | symbol, metadata : any) {\n    if(!PROPERTY_METADATA.has(target)) {\n        PROPERTY_METADATA.set(target, new Map());\n    }\n    \n    if(!PROPERTY_METADATA.get(target)!.has(property)) {\n        PROPERTY_METADATA.get(target)!.set(property, []);\n    }\n    \n    PROPERTY_METADATA.get(target)!.get(property)!.push(metadata);\n}\n\nexport function populate<T>(target : T, source : Partial<T>) : T {\n    for(const key of Object.keys(source) as (keyof T)[]) {\n        target[key] = source[key] as T[keyof T];\n    }\n    \n    return target;\n}\n","import { Ctor, populate, pushPropertyMetadata } from '../utils/metadata';\n\nexport type Type = typeof Boolean | typeof String | typeof Number | typeof Object | typeof Date | Ctor<any>;\n\nexport class PropertyMetadata {\n    type!: Type;\n    required!: boolean;\n    default?: any;\n    \n    validate(value : any, key : string | symbol) {\n        if(this.required && null == value) {\n            throw new Error(`Property \"${typeof key === 'symbol' ? Symbol.keyFor(key) : key}\" required`);\n        }\n    }\n}\n\nexport function Property(options: { type?: Type, required?: boolean, default?: any } = {}) : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new PropertyMetadata(), {\n            type: Reflect.getMetadata('design:type', target, property),\n            required: false,\n            ...options\n        }))\n    }\n}\n","import { resolveForwardRef } from '@angular/core';\nimport { Ctor } from '../utils/metadata';\nimport { PropertyMetadata } from './property';\n\nexport class RelationMetadata<T> extends PropertyMetadata {\n    required!: boolean;\n    default?: T;\n    // private _entity! : ForwardRefFn | Ctor<T>;\n    \n    set type(type : Ctor<T> /*| ForwardRefFn */) {\n        (this as any)._type = type;\n    }\n    get type() : Ctor<T> {\n        return resolveForwardRef((this as any)._type);\n    }\n    \n}\n","import { RelationMetadata } from './relation';\nimport { Ctor, populate, pushPropertyMetadata } from '../utils/metadata';\nimport { ForwardRefFn } from '@angular/core';\n\nexport class BelongsToMetadata<T> extends RelationMetadata<T> {}\n\nexport function BelongsTo<T>(options: { type?: Ctor<T>|ForwardRefFn, required?: boolean, default?: T } = {}) : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new BelongsToMetadata(), {\n            type: Reflect.getMetadata('design:type', target, property),\n            required: false,\n            ...options\n        }))\n    }\n}\n","import { Ctor, populate, pushClassMetadata } from '../utils/metadata';\n\nexport class DesignDocMetadata<T> {\n    entity!: Ctor<T>;\n    name!: string;\n}\n\ndeclare global {\n    export const emit : any;\n}\n\nexport function DesignDoc<T>(entity : Ctor<T>, name: string) : ClassDecorator {\n    return (target : Function) => {\n        pushClassMetadata(target, populate(new DesignDocMetadata<T>(), {\n            entity,\n            name\n        }));\n    }\n}\n","import { Ctor, populate, pushClassMetadata } from '../utils/metadata';\nimport { Hydrator } from '../hydrator';\nimport { Validator } from '../validator';\n\nexport class EntityMetadata {\n    name!: string;\n    attachments!: boolean;\n    hydrator?: Ctor<Hydrator>;\n    validator?: Ctor<Validator>;\n}\n\nexport function Entity(name : string, options: {\n    attachments?: boolean;\n    hydrator?: Ctor<Hydrator>;\n    validator?: Ctor<Validator>;\n} = {}) : ClassDecorator {\n    return (target : Function) => {\n        pushClassMetadata(target, populate(new EntityMetadata(), {\n            name,\n            attachments: false,\n            // hydrator: HydratorImpl,\n            // validator: ValidatorImpl,\n            ...options\n        }));\n    }\n}\n","import { populate, pushPropertyMetadata } from '../utils/metadata';\n\n\nexport class FilterMetadata {}\n\nexport function Filter() : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new FilterMetadata(), {\n        }))\n    }\n}\n","import { RelationMetadata } from './relation';\nimport { Ctor, populate, pushPropertyMetadata } from '../utils/metadata';\nimport { ForwardRefFn } from '@angular/core';\n\nexport class HasManyMetadata<T> extends RelationMetadata<T> {}\n\nexport function HasMany<T>(type: Ctor<T>|ForwardRefFn, options: { required?: boolean, default?: T } = {}) : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new HasManyMetadata(), {\n            type,\n            required: false,\n            ...options\n        }))\n    }\n}\n","import { RelationMetadata } from './relation';\nimport { Ctor, populate, pushPropertyMetadata } from '../utils/metadata';\nimport { ForwardRefFn } from '@angular/core';\n\nexport class HasManyMapMetadata<T> extends RelationMetadata<T> {}\n\nexport function HasManyMap<T>(type: Ctor<T>|ForwardRefFn, options: { required?: boolean, default?: T } = {}) : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new HasManyMapMetadata(), {\n            type,\n            required: false,\n            ...options\n        }))\n    }\n}\n","import { populate, pushPropertyMetadata } from '../utils/metadata';\nimport 'reflect-metadata';\nimport { PropertyMetadata, Type } from './property';\n\nexport enum IdStrategy {\n    Static = 'static',\n    // Uuid = 'uuid',\n    // Increment = 'increment'\n}\n\nexport class IdMetadata extends PropertyMetadata {\n    strategy!: IdStrategy;\n    readonly required = true;\n}\n\nexport function Id(options: { strategy?: IdStrategy, type?: Type } = {}) : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new IdMetadata(), {\n            strategy: IdStrategy.Static,\n            type: Reflect.getMetadata('design:type', target, property),\n            ...options\n        }))\n    }\n}\n","import { RelationMetadata } from './relation';\nimport { Ctor, populate, pushPropertyMetadata } from '../utils/metadata';\nimport { ForwardRefFn } from '@angular/core';\n\nexport class InlineMetadata<T> extends RelationMetadata<T> {}\n\nexport function Inline<T>(options: { type?: Ctor<T>|ForwardRefFn, required?: boolean, default?: T } = {}) : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new InlineMetadata(), {\n            type: Reflect.getMetadata('design:type', target, property),\n            required: false,\n            ...options\n        }))\n    }\n}\n","import { Ctor, populate, pushClassMetadata } from '../utils/metadata';\nimport { Hydrator } from '../hydrator';\nimport { Validator } from '../validator';\n\nexport class InlineEntityMetadata {\n    inline!: true;\n    hydrator?: Ctor<Hydrator>;\n    validator?: Ctor<Validator>;\n}\n\nexport function InlineEntity(options: {\n    hydrator?: Ctor<Hydrator>;\n    validator?: Ctor<Validator>;\n} = {}) : ClassDecorator {\n    return (target : Function) => {\n        pushClassMetadata(target, populate(new InlineEntityMetadata(), {\n            // hydrator: HydratorImpl,\n            // validator: ValidatorImpl,\n            ...options,\n            inline: true\n        }));\n    }\n}\n","import { populate, pushPropertyMetadata } from '../utils/metadata';\n\n\nexport class ValidateDocMetadata {}\n\nexport function ValidateDoc() : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new ValidateDocMetadata(), {\n        }))\n    }\n}\n","import { populate, pushPropertyMetadata } from '../utils/metadata';\n\n\nexport class ViewMetadata {}\n\nexport function View() : PropertyDecorator {\n    return (target: Object, property: string | symbol) => {\n        pushPropertyMetadata(target.constructor, property, populate(new ViewMetadata(), {\n        }))\n    }\n}\n","import { Metadata } from './metadata';\n\nexport interface HydrateOptions {\n    depth? : number;\n    circularCache? : { [ key : string ] : any };\n}\n\nexport abstract class Hydrator {\n    abstract hydrate<T>(entity : T, data : PouchDB.Core.Document<T> & PouchDB.Core.GetMeta, metadata : Metadata<T>, options? : HydrateOptions) : Promise<T>;\n    \n    abstract dehydrate<T>(entity : T, metadata : Metadata<T>, options? : { includeRev? : boolean }) : PouchDB.Core.Document<T> & Partial<PouchDB.Core.RevisionIdMeta>;\n}\n\n\n","import { Metadata } from './metadata';\n\nexport abstract class Validator {\n    abstract validate<T>(entity : T, _metadata : Metadata<T>) : Promise<true>;\n}\n","import { Ctor } from './utils/metadata';\nimport { InjectionToken } from '@angular/core';\nimport { Metadata } from './metadata';\n\n\nexport interface EqualChecker {\n    (a : any, b : any): boolean\n}\n\nexport interface ConnectionFactory<T extends {} = {}> {\n    (name : string): PouchDB.Database<T>\n}\n\nexport interface AdamantId {\n    head(name : string) : string;\n    tail(name : string) : string;\n    build(name : string, type : typeof String | typeof Number, id : string|number) : string;\n    parse(id : string) : { name: string, type: typeof String | typeof Number, id : string | number };\n}\n\nexport const ADAMANT_CONNECTION = new InjectionToken<PouchDB.Database>('ADAMANT_CONNECTION');\nexport const ADAMANT_ENTITY_CLASS = new InjectionToken<Ctor<any>>('ADAMANT_ENTITY_CLASS');\nexport const ADAMANT_ENTITY_METADATA = new InjectionToken<Metadata<any>>('ADAMANT_ENTITY_METADATA');\nexport const ADAMANT_EQUAL_CHECKER = new InjectionToken<EqualChecker>('ADAMANT_EQUAL_CHECKER');\nexport const ADAMANT_CONNECTION_FACTORY = new InjectionToken<ConnectionFactory>('ADAMANT_CONNECTION_FACTORY');\nexport const ADAMANT_ID = new InjectionToken<AdamantId>('ADAMANT_ID');\n","export function markDeleted<T extends {}>(entity : T) : T {\n    Object.defineProperty(entity, '_deleted', { configurable: true, value: true });\n    \n    return entity;\n}\n\nexport function markIdRev<T extends {}>(entity : T, res : { id? : string, rev? : string }) : T {\n    Object.defineProperty(entity, '_id', { configurable: true, value: res.id });\n    Object.defineProperty(entity, '_rev', { configurable: true, value: res.rev });\n    \n    return entity;\n}\n","import { Ctor, getAllPropertyMetadata, getClassMetadata } from './utils/metadata';\nimport { IdMetadata, IdStrategy } from './annotations/id';\nimport { PropertyMetadata } from './annotations/property';\nimport { EntityMetadata } from './annotations/entity';\nimport { Hydrator } from './hydrator';\nimport { Validator } from './validator';\nimport { BelongsToMetadata } from './annotations/belongs-to';\nimport { HasManyMetadata } from './annotations/has-many';\nimport { HasManyMapMetadata } from './annotations/has-many-map';\nimport { InlineMetadata } from './annotations/inline';\nimport { InlineEntityMetadata } from './annotations/inline-entity';\n\nexport class Metadata<T> {\n    readonly inline: boolean = false;\n    readonly name?: string;\n    readonly attachments?: boolean;\n    readonly hydrator!: Ctor<Hydrator>;\n    readonly validator!: Ctor<Validator>;\n    \n    readonly id! : keyof T;\n    readonly idType!: typeof String | typeof Number;\n    readonly idStrategy! : IdStrategy;\n    \n    readonly properties = new Map<string | symbol, PropertyMetadata|IdMetadata|BelongsToMetadata<any>|HasManyMetadata<any>|HasManyMapMetadata<any>|InlineMetadata<any>>();\n    // readonly belongsTo = new Map<string | symbol, BelongsToMetadata<any>>();\n    // readonly hasMany = new Map<string | symbol, HasManyMetadata<any>>();\n    // readonly hasManyMap = new Map<string | symbol, HasManyMapMetadata<any>>();\n    \n    constructor(protected readonly entity : Ctor<T>) {\n        this.parse();\n        this.assert();\n    }\n    \n    protected parse() {\n        const classMetadata = getClassMetadata<EntityMetadata | InlineEntityMetadata>(this.entity);\n        const propertyMetadata = getAllPropertyMetadata<IdMetadata>(this.entity);\n        \n        for(const annotation of classMetadata) {\n            if(annotation instanceof EntityMetadata || annotation instanceof InlineEntityMetadata) {\n                Object.assign(this, annotation);\n            }\n        }\n        \n        for(const [ property, annotations ] of propertyMetadata) {\n            for(const annotation of annotations) {\n                if(annotation instanceof IdMetadata) {\n                    (this as any).id = property;\n                    (this as any).idType = annotation.type;\n                    (this as any).idStrategy = annotation.strategy;\n                }\n                \n                // if(annotation instanceof BelongsToMetadata) {\n                //     this.belongsTo.set(property, annotation);\n                // }\n                //\n                // if(annotation instanceof HasManyMetadata) {\n                //     this.hasMany.set(property, annotation);\n                // }\n                //\n                // if(annotation instanceof HasManyMapMetadata) {\n                //     this.hasManyMap.set(property, annotation);\n                // }\n                \n                if(annotation instanceof PropertyMetadata) {\n                    this.properties.set(property, annotation);\n                }\n            }\n        }\n    }\n    \n    protected assert() {\n        for(const key of ((this.inline ? [] : [ 'id', 'idStrategy', 'name', 'attachments' ]) as (keyof Metadata<T>)[])) {\n            if(null == this[key]) {\n                throw new Error(`Missing metadata '${key}' for entity \"${this.entity.name}\"`);\n            }\n        }\n    }\n}\n","import { Hydrator } from './hydrator';\nimport { Validator } from './validator';\nimport { Ctor } from './utils/metadata';\nimport { ADAMANT_CONNECTION, ADAMANT_ENTITY_CLASS, ADAMANT_ENTITY_METADATA } from './injector-tokens';\nimport { Inject } from '@angular/core';\nimport { markDeleted, markIdRev } from './utils/marks';\nimport { Metadata } from './metadata';\n\nexport enum BulkOperation {\n    Create = 'create',\n    Update = 'update',\n    Delete = 'delete'\n}\n\nexport class Bulk<T> {\n    \n    constructor(@Inject(ADAMANT_CONNECTION) protected readonly db : PouchDB.Database<T>,\n                @Inject(ADAMANT_ENTITY_CLASS) protected readonly entityClass : Ctor<T>,\n                @Inject(ADAMANT_ENTITY_METADATA) protected readonly metadata : Metadata<T>,\n                protected readonly hydrator : Hydrator,\n                protected readonly validator : Validator) {}\n    \n    protected async bulk(entities : T[], operation : BulkOperation) : Promise<T[]> {\n        if(0 === entities.length) {\n            return entities;\n        }\n        \n        const docs = await Promise.all(entities.map(async entity => {\n            if(!(entity instanceof this.entityClass)) {\n                throw new Error(`Entity \"${entity}\" is not instanceof ${this.entityClass.name}`);\n            }\n    \n            await this.validator.validate(entity, this.metadata);\n    \n            const doc : PouchDB.Core.ChangesMeta & PouchDB.Core.Document<T> = this.hydrator.dehydrate(entity, this.metadata, { includeRev: operation === BulkOperation.Update || operation === BulkOperation.Delete });\n            if(operation === BulkOperation.Delete) {\n                doc._deleted = true;\n            }\n            return doc;\n        }));\n        \n        const result = await this.db.bulkDocs(docs);\n        const errors : PouchDB.Core.Error[] = result.filter(r => Object.prototype.hasOwnProperty.call(r, 'error'));\n        \n        if(0 < errors.length) {\n            throw errors;\n        }\n        \n        result.forEach((res, index) => {\n            if(operation === BulkOperation.Delete) {\n                markDeleted(entities[index]);\n            }\n            markIdRev(entities[index], res);\n        });\n        \n        return entities;\n    }\n    \n    create(entities : T[]) : Promise<T[]> {\n        return this.bulk(entities, BulkOperation.Create);\n    }\n    \n    update(entities : T[]) : Promise<T[]> {\n        return this.bulk(entities, BulkOperation.Update);\n    }\n    \n    delete(entities : T[]) : Promise<T[]> {\n        return this.bulk(entities, BulkOperation.Delete);\n    }\n}\n","import { defer, Deffered } from './utils/defer';\n\nexport class ReadQueryBatcher {\n    queue : string[] = [];\n    deffered? : Deffered<PouchDB.Core.Document<any>[]>;\n    \n    constructor(protected readonly db : PouchDB.Database) {}\n    \n    read<T>(keys : string[]) : Promise<PouchDB.Core.Document<T>[]> {\n        this.queue.push(...keys);\n        \n        return this.schedule<T>().then(docs => {\n            return keys\n                .map(key => docs.find(doc => doc._id === key))\n                .filter(Boolean)\n                .map(doc => JSON.parse(JSON.stringify(doc)));\n        });\n    }\n    \n    protected schedule<T>() : Deffered<PouchDB.Core.Document<T>[]> {\n        if(!this.deffered) {\n            setImmediate(() => {\n                this.execute();\n            });\n            this.deffered = defer();\n            this.deffered.then(() => {\n                delete this.deffered\n            }, () => {\n                delete this.deffered\n            });\n        }\n        \n        return this.deffered;\n    }\n    \n    protected async execute() {\n        const keys = this.queue.filter((v, i, a) => i === a.indexOf(v));\n        this.queue = [];\n        \n        try {\n            const { rows } = await this.db.allDocs({\n                include_docs: true,\n                keys\n            });\n            \n            this.deffered!.resolve(rows.map(r => r.doc).filter(Boolean));\n        } catch(e) {\n            this.deffered!.reject(e);\n        }\n    }\n}\n","export type Deffered<T> = Promise<T> & { resolve(v : T) : void, reject(e : any) : void };\n\nexport function defer<T>() : Deffered<T> {\n    let resolve : any , reject : any, promise = new Promise<T>((res, rej) => {\n        resolve = res;\n        reject = rej;\n    });\n    \n    return Object.assign(promise, { resolve, reject });\n}\n","import { AdamantRepository } from './repository';\nimport { HydrateOptions } from './hydrator';\n\nexport class QueryBuilder<T> {\n    \n    protected _selector : PouchDB.Find.Selector = {};\n    protected _sort : Array<string|{[propName: string]: 'asc' | 'desc'}> = [];\n    protected _limit? : number;\n    protected _skip? : number;\n    \n    constructor(protected readonly repository : AdamantRepository<T>, head : string, tail : string) {\n        this._selector._id = {\n            $gt: head,\n            $lt: tail\n        }\n    }\n    \n    selector(field : string, condition : PouchDB.Find.Selector | PouchDB.Find.ConditionOperators | string | number | boolean) : this;\n    selector(selector : PouchDB.Find.Selector) : this;\n    selector(fieldOrSelector : string|PouchDB.Find.Selector, condition? : PouchDB.Find.Selector | PouchDB.Find.ConditionOperators | string | number | boolean) : this {\n        if(typeof fieldOrSelector === 'string') {\n            if(typeof condition !== 'object') {\n                condition = {\n                    $eq: condition\n                }\n            }\n            if(fieldOrSelector in this._selector) {\n                \n                Object.assign(this._selector[ fieldOrSelector ], condition)\n            } else {\n                this._selector[ fieldOrSelector ] = condition;\n            }\n        } else {\n            for(let key in fieldOrSelector) {\n                this.selector(key, fieldOrSelector[key]);\n            }\n        }\n        return this;\n    }\n    \n    sort(property : string, direction? : 'asc' | 'desc') : this;\n    sort(sort : { [propName: string]: 'asc' | 'desc' }) : this;\n    sort(propertyOrSort : string|{ [propName: string]: 'asc' | 'desc' }, direction? : 'asc' | 'desc') : this {\n        if(typeof propertyOrSort === 'string' && direction) {\n            this._sort.push({ [propertyOrSort]: direction });\n        } else {\n            this._sort.push(propertyOrSort);\n        }\n        return this;\n    }\n    \n    limit(limit : number) : this {\n        this._limit = limit;\n        return this;\n    }\n    \n    skip(skip : number) : this {\n        this._skip = skip;\n        return this;\n    }\n    \n    resolve(options?: HydrateOptions) : Promise<T[]> {\n        return this.repository.executeQuery(this, options);\n    }\n    \n    toFindRequest() {\n        const req : PouchDB.Find.FindRequest<T> = {\n            selector: this._selector\n        };\n        \n        if(0 < this._sort.length) {\n            req.sort = this._sort;\n        }\n        \n        if(this._limit != null) {\n            req.limit = this._limit;\n        }\n        \n        if(this._skip != null) {\n            req.skip = this._skip;\n        }\n        \n        return req;\n    }\n}\n","import { Inject, Injectable } from '@angular/core';\nimport { Validator } from './validator';\nimport { Ctor, getAllPropertyMetadata, getClassMetadata, getPropertyMetadata, populate } from './utils/metadata';\nimport { HydrateOptions, Hydrator } from './hydrator';\nimport { Metadata } from './metadata';\nimport { Bulk } from './bulk';\nimport { markDeleted, markIdRev } from './utils/marks';\nimport * as equal from 'fast-deep-equal';\nimport { ReadQueryBatcher } from './read-query-batcher';\nimport { QueryBuilder } from './query-builder';\nimport { DesignDocMetadata } from './annotations/design-doc';\nimport { ViewMetadata } from './annotations/view';\nimport { FilterMetadata } from './annotations/filter';\nimport { ValidateDocMetadata } from './annotations/validate-doc';\nimport {\n    ADAMANT_CONNECTION,\n    ADAMANT_ENTITY_CLASS,\n    ADAMANT_ENTITY_METADATA,\n    ADAMANT_EQUAL_CHECKER,\n    ADAMANT_ID,\n    AdamantId,\n    EqualChecker\n} from './injector-tokens';\n\n\nexport function equalCheckerFactory() {\n    return equal;\n}\n\n\n@Injectable()\nexport class AdamantRepository<T> {\n    protected readonly queryBatcher = new ReadQueryBatcher(this.db);\n    \n    constructor(@Inject(ADAMANT_CONNECTION) protected readonly db : PouchDB.Database<T>,\n                @Inject(ADAMANT_ENTITY_CLASS) protected readonly entityClass : Ctor<T>,\n                @Inject(ADAMANT_ENTITY_METADATA) protected readonly metadata : Metadata<T>,\n                @Inject(ADAMANT_EQUAL_CHECKER) protected readonly equal : EqualChecker,\n                @Inject(ADAMANT_ID) protected readonly id : AdamantId,\n                public readonly bulk : Bulk<T>,\n                public readonly hydrator : Hydrator,\n                public readonly validator : Validator) {\n    }\n    \n    async create(entity : T) : Promise<T> {\n        await this.validator.validate(entity, this.metadata);\n        \n        const doc = this.hydrator.dehydrate(entity, this.metadata);\n        \n        const result = await this.db.put(doc);\n        \n        markIdRev(entity, result);\n        \n        return entity;\n    }\n    \n    async upsert(entity : T) : Promise<T> {\n        await this.validator.validate(entity, this.metadata);\n        \n        const doc = this.hydrator.dehydrate(entity, this.metadata);\n        \n        const result = await this._upsert(this.id.build(this.metadata.name!, this.metadata.idType, entity[ this.metadata.id ] as any), doc);\n        \n        markIdRev(entity, result);\n        \n        return entity;\n    }\n    \n    /** @internal */\n    _upsert(id : string, document : PouchDB.Core.Document<T> & Partial<PouchDB.Core.RevisionIdMeta>) : Promise<PouchDB.UpsertResponse> {\n        return this.db.upsert(id, existingDoc => {\n            const { _id: _1, _rev: _2, ...d1 } = document as any;\n            const { _id: _3, _rev: _4, ...d2 } = existingDoc as any;\n            \n            if(this.equal(d1, d2)) {\n                return false;\n            }\n            \n            return document;\n        })\n    }\n    \n    async update(entity : T) : Promise<T> {\n        await this.validator.validate(entity, this.metadata);\n        \n        const doc = this.hydrator.dehydrate(entity, this.metadata, { includeRev: true });\n        \n        const result = await this.db.put(doc);\n        \n        markIdRev(entity, result);\n        \n        return entity;\n    }\n    \n    async delete(entity : T) : Promise<T> {\n        await this.validator.validate(entity, this.metadata);\n        \n        const doc : PouchDB.Core.Document<T> & Partial<PouchDB.Core.RevisionIdMeta> & PouchDB.Core.ChangesMeta = this.hydrator.dehydrate(entity, this.metadata, { includeRev: true });\n        \n        doc._deleted = true;\n        \n        const result = await this.db.put(doc);\n        \n        markIdRev(entity, result);\n        markDeleted(entity);\n        \n        return entity;\n    }\n    \n    read(id : number | string, options? : HydrateOptions) {\n        return this._read(this.id.build(this.metadata.name!, this.metadata.idType, id), options);\n    }\n    \n    /** @internal */\n    async _read(id : string, options? : HydrateOptions) {\n        return this.hydrator.hydrate(Object.create(this.entityClass.prototype), await this._readRaw(id), this.metadata, options);\n    }\n    \n    /** @internal */\n    async _readRaw(id : string) : Promise<PouchDB.Core.Document<T>> {\n        const result = await this.queryBatcher.read<T>([ id ]);\n        if(!result[ 0 ]) {\n            throw {\n                status : 404,\n                name   : 'not_found',\n                message: 'missing',\n                reason : 'missing',\n                id\n            }\n        }\n        \n        return result[ 0 ];\n    }\n    \n    async readAll(ids? : (string | number)[], options? : HydrateOptions) {\n        const opt : PouchDB.Core.AllDocsWithKeysOptions & PouchDB.Core.AllDocsWithinRangeOptions = {\n            include_docs: true\n        } as any;\n        \n        if(ids) {\n            opt.keys = ids.map(id => this.id.build(this.metadata.name!, this.metadata.idType, id)).sort((a, b) => a.localeCompare(b));\n        } else {\n            opt.startkey = this.id.head(this.metadata.name!);\n            opt.endkey = this.id.tail(this.metadata.name!);\n        }\n        \n        return this._readAll(opt, options);\n    }\n    \n    /** @internal */\n    async _readAll(opt : PouchDB.Core.AllDocsWithKeysOptions | PouchDB.Core.AllDocsWithinRangeOptions, options? : HydrateOptions) {\n        return await Promise.all((await this._readAllRaw(opt))\n            .map(async doc => this.hydrator.hydrate(Object.create(this.entityClass.prototype), doc, this.metadata, options))\n        )\n    }\n    \n    /** @internal */\n    async _readAllRaw(opt : PouchDB.Core.AllDocsWithKeysOptions | PouchDB.Core.AllDocsWithinRangeOptions) : Promise<PouchDB.Core.Document<T>[]> {\n        if(opt.include_docs && 'keys' in opt) {\n            return await this.queryBatcher.read<T>(opt.keys);\n        }\n        \n        return (await this.db.allDocs<T>(opt)).rows.map(r => r.doc!).filter(Boolean);\n    }\n    \n    query() : QueryBuilder<T> {\n        return new QueryBuilder<T>(this, this.id.head(this.metadata.name!), this.id.tail(this.metadata.name!));\n    }\n    \n    async executeQuery(query : QueryBuilder<T>, options? : HydrateOptions) {\n        return await Promise.all((await this.db.find(query.toFindRequest())).docs\n            .map(async doc => this.hydrator.hydrate(Object.create(this.entityClass.prototype), doc, this.metadata, options))\n        )\n    }\n    \n    build(props : Partial<T> = {}) : T {\n        return populate(Object.create(this.entityClass.prototype), props);\n    }\n    \n    async persistDesignDoc<T extends {}>(doc : T) : Promise<void> {\n        const classAnnotations = getClassMetadata(doc.constructor, DesignDocMetadata);\n        const propertyAnnotations = getAllPropertyMetadata<ViewMetadata | FilterMetadata | ValidateDocMetadata>(doc.constructor);\n        \n        if(1 !== classAnnotations.length) {\n            throw new Error(`Design doc annotation required`);\n        }\n        \n        if(classAnnotations[ 0 ].entity !== this.entityClass) {\n            throw new Error(`Invalid design doc entity`);\n        }\n        \n        let document : {\n            _id : string;\n            views : { [ key : string ] : { map : string, reduce? : string } };\n            filters : { [ key : string ] : string };\n            validate_doc_update? : string;\n        } = {\n            _id    : `_design/${classAnnotations[ 0 ].name}`,\n            views  : {},\n            filters: {}\n        };\n        \n        for(const [ property, annotations ] of propertyAnnotations) {\n            for(const annotation of annotations) {\n                if(annotation instanceof ViewMetadata) {\n                    const value : any = doc[ property as keyof T ];\n                    const type = typeof value;\n                    \n                    if(type === 'string' || type === 'function') {\n                        document.views[ property as string ] = {\n                            map: value.toString()\n                        };\n                    } else if(type === 'object') {\n                        document.views[ property as string ] = {\n                            map   : value.map.toString(),\n                            reduce: value.reduce && value.reduce.toString()\n                        };\n                    }\n                } else if(annotation instanceof FilterMetadata) {\n                    document.filters[ property as string ] = doc[ property as keyof T ].toString();\n                } else if(annotation instanceof ValidateDocMetadata) {\n                    document.validate_doc_update = doc[ property as keyof T ].toString();\n                }\n            }\n        }\n        \n        await this.db.upsert<any>(document._id, existingDoc => {\n            const { _id: _1, _rev: _2, ...d1 } = document as any;\n            const { _id: _3, _rev: _4, ...d2 } = existingDoc as any;\n            \n            if(this.equal(d1, d2)) {\n                return false;\n            }\n            \n            return document;\n        });\n    }\n    \n    async view<T, P extends keyof T>(designDoc : Ctor<T>, name : P, { depth, circularCache, ...options } : HydrateOptions & PouchDB.Query.Options<T, any> = {}) {\n        const classAnnotation = getClassMetadata(designDoc, DesignDocMetadata)[ 0 ];\n        \n        if(!classAnnotation) {\n            throw new Error(`Design doc annotation required`);\n        }\n        \n        if(classAnnotation.entity !== this.entityClass) {\n            throw new Error(`Invalid design doc entity`);\n        }\n        \n        const propertyAnnotation = getPropertyMetadata(designDoc, name as string, ViewMetadata);\n        \n        if(!propertyAnnotation) {\n            throw new Error(`Unknown view \"${name}\"`);\n        }\n        \n        if(!options) {\n            options = {}\n        }\n        options.include_docs = true;\n        \n        return await Promise.all((await this.rawView(`${classAnnotation.name}/${name}`, options))\n            .rows.map(row => row.doc!)\n            .map(async doc => this.hydrator.hydrate(Object.create(this.entityClass.prototype), doc, this.metadata, {\n                depth,\n                circularCache\n            }))\n        )\n    }\n    \n    rawView<R = T>(name : string, options? : PouchDB.Query.Options<R, any>) {\n        return this.db.query(name, options);\n    }\n}\n","import { PropertyMetadata, Type } from './annotations/property';\nimport { InlineMetadata } from './annotations/inline';\nimport { HasManyMapMetadata } from './annotations/has-many-map';\nimport { markIdRev } from './utils/marks';\nimport { HydrateOptions, Hydrator } from './hydrator';\nimport { AdamantRepository } from './repository';\nimport { RelationMetadata } from './annotations/relation';\nimport { AdamantConnectionManager } from './connection-manager';\nimport { HasManyMetadata } from './annotations/has-many';\nimport { Metadata } from './metadata';\nimport { BelongsToMetadata } from './annotations/belongs-to';\nimport { IdMetadata } from './annotations/id';\nimport { Inject, Injectable } from '@angular/core';\nimport { ADAMANT_ID, AdamantId } from './injector-tokens';\n\n@Injectable()\nexport class HydratorImpl extends Hydrator {\n    constructor(@Inject(ADAMANT_ID) protected readonly id : AdamantId,\n                protected readonly connectionManager : AdamantConnectionManager) {\n        super();\n    }\n    \n    dehydrate<T>(entity : T, metadata : Metadata<T>, options? : { includeRev? : boolean }) : PouchDB.Core.Document<T> & Partial<PouchDB.Core.RevisionIdMeta> {\n        const doc : any = {};\n        \n        if(options && options.includeRev) {\n            doc._rev = (entity as any)._rev;\n        }\n        \n        if(metadata.attachments && (entity as any)._attachments) {\n            doc._attachments = (entity as any)._attachments;\n        }\n        \n        for(const [ property, annotation ] of metadata.properties) {\n            const value : any = entity[ property as keyof T ];\n            if(annotation instanceof RelationMetadata) {\n                if(value != null) {\n                    const relationMetadata = this.connectionManager.getMetadata(annotation.type);\n                    \n                    if(annotation instanceof BelongsToMetadata) {\n                        doc[ property ] = relationToId(value, relationMetadata, this.id);\n                    } else if(annotation instanceof HasManyMetadata) {\n                        doc[ property ] = (value as any[]).map(rel => relationToId(rel, relationMetadata, this.id));\n                    } else if(annotation instanceof HasManyMapMetadata) {\n                        const rel : any = {};\n                        for(const key in value) {\n                            rel[ key ] = relationToId(value[ key ], relationMetadata, this.id);\n                        }\n                        doc[ property ] = rel;\n                    } else if(annotation instanceof InlineMetadata) {\n                        doc[ property ] = this.connectionManager.getRepository(annotation.type).hydrator.dehydrate(value, relationMetadata);\n                    }\n                }\n            } else if(annotation instanceof PropertyMetadata) {\n                doc[ property ] = value;\n                \n                if(annotation instanceof IdMetadata) {\n                    doc._id = this.id.build(metadata.name!, metadata.idType, value as any);\n                }\n            }\n            \n            if(undefined === doc[ property ]) {\n                delete doc[ property ];\n            }\n        }\n        \n        return doc as PouchDB.Core.Document<T> & Partial<PouchDB.Core.RevisionIdMeta>;\n    }\n    \n    async hydrate<T extends {}>(entity : T, data : PouchDB.Core.Document<T> & PouchDB.Core.GetMeta, metadata : Metadata<T>, { depth = Infinity, circularCache = {} } : HydrateOptions = {}) : Promise<T> {\n        if(data._id in circularCache) {\n            return circularCache[ data._id ];\n        }\n        \n        circularCache[ data._id ] = entity;\n        \n        markIdRev(entity, { id: data._id, rev: data._rev });\n        \n        if(metadata.attachments) {\n            Object.defineProperty(entity, '_attachments', { configurable: true, value: data._attachments });\n        }\n        \n        for(const [ property, annotation ] of metadata.properties) {\n            const value : any = data[ property as keyof T ];\n            if(null == value) {\n                entity[ property as keyof T ] = null!;\n            } else {\n                if(annotation instanceof RelationMetadata) {\n                    const relationMetadata = this.connectionManager.getMetadata(annotation.type);\n                    const relationRepository = this.connectionManager.getRepository(annotation.type);\n                    \n                    if(annotation instanceof BelongsToMetadata) {\n                        entity[ property as keyof T ] = circularCache.hasOwnProperty(value) ? circularCache[value] : await relationRepository\n                            ._read(value, {\n                                depth: depth - 1,\n                                circularCache\n                            });\n                    } else if(annotation instanceof HasManyMetadata) {\n                        entity[ property as keyof T ] = await readAllWithCircularCache(relationRepository, value, depth - 1, circularCache) as any;\n                        \n                    } else if(annotation instanceof HasManyMapMetadata) {\n                        const keys = Object.keys(value);\n                        const values = keys.map(k => value[ k ]);\n                        \n                        const entities = await readAllWithCircularCache(relationRepository, values, depth - 1, circularCache);\n                        const rel : any = {};\n                        for(const key of keys) {\n                            rel[ key ] = entities.find(e => e._id === value[ key ]);\n                        }\n                        entity[ property as keyof T ] = rel;\n                    } else if(annotation instanceof InlineMetadata) {\n                        entity[ property as keyof T ] = await relationRepository\n                            .hydrator.hydrate(relationRepository.build(), value, relationMetadata)\n                    }\n                } else if(annotation instanceof PropertyMetadata) {\n                    const descriptor = Object.getOwnPropertyDescriptor(Object.getPrototypeOf(entity), property);\n                    if(!descriptor || descriptor.writable || descriptor.set) {\n                        entity[ property as keyof T ] = unpack(value, annotation.type);\n                    }\n                }\n            }\n        }\n        \n        return entity;\n    }\n}\n\nasync function readAllWithCircularCache<T>(repo : AdamantRepository<T>, keys : string[], depth : number, circularCache : { [ key : string ] : any }) : Promise<T[]> {\n    const filteredKeys = keys.filter(k => !circularCache.hasOwnProperty(k));\n    let fromDb : T[];\n    \n    if(filteredKeys.length) {\n        fromDb = await repo._readAll({ keys: filteredKeys, include_docs: true }, { depth, circularCache });\n    }\n    \n    return keys.map(key => {\n        if(circularCache.hasOwnProperty(key)) {\n            return circularCache[key];\n        }\n        \n        return fromDb && fromDb.find(e => (e as any)._id === key);\n    })\n}\n\nfunction relationToId<T>(rel : string | T, metadata : Metadata<T>, id : AdamantId) : string {\n    return typeof rel === 'string'\n        ? rel\n        : id.build(metadata.name!, metadata.idType, rel[ metadata.id ] as any)\n}\n\nfunction unpack(value : any, type : Type) : any {\n    if(type === Date && value) {\n        return new Date(value);\n    }\n    \n    return value;\n}\n","import { Validator } from './validator';\nimport { Metadata } from './metadata';\n\nexport class ValidatorImpl extends Validator {\n    async validate<T>(entity : T, metadata : Metadata<T>) : Promise<true> {\n        for(const [ property, annotation ] of metadata.properties) {\n            await annotation.validate(entity[property as keyof T], property);\n        }\n        \n        return true;\n    }\n    \n}\n","import { Inject, Injectable, Injector } from '@angular/core';\nimport {\n    AdamantRepository, equalCheckerFactory\n} from './repository';\nimport { Ctor } from './utils/metadata';\nimport { Metadata } from './metadata';\nimport { Bulk } from './bulk';\nimport { Hydrator } from './hydrator';\nimport { Validator } from './validator';\nimport { HydratorImpl } from './hydrator-impl';\nimport { ValidatorImpl } from './validator-impl';\nimport {\n    ADAMANT_CONNECTION,\n    ADAMANT_CONNECTION_FACTORY, ADAMANT_ENTITY_CLASS, ADAMANT_ENTITY_METADATA,\n    ADAMANT_EQUAL_CHECKER,\n    ADAMANT_ID,\n    AdamantId,\n    ConnectionFactory\n} from './injector-tokens';\n\n\n\nexport function adamantIdFactory() : AdamantId {\n    return {\n        head(name : string) {\n            return `${name}_0`\n        },\n        tail(name : string) {\n            return `${name}_9`\n        },\n        build(name : string, type : typeof String | typeof Number, id : string|number) : string {\n            if(type === String) {\n                return `${name}_2_${id}`;\n            } else if(type === Number) {\n                const idStr = id.toString();\n                return `${name}_1_${'0'.repeat(16 - idStr.length)}${idStr}`;\n            }\n            throw new Error(`Invalid id type \"${type}\"`);\n        },\n        parse(id : string) : { name: string, type: typeof String | typeof Number, id : string | number } {\n            const match = /^(.*)_(1|2)_(.*)$/.exec(id);\n            \n            if(!match) {\n                throw new TypeError(`Invalid id \"${id}\"`);\n            }\n            \n            return {\n                name: match[1]!,\n                type: match[2] === '2' ? String : Number,\n                id: match[2] === '2' ? match[3] : Number.parseInt(match[3], 10)\n            };\n        }\n    }\n}\n\n\nexport function createAdamantConnection(factory : ConnectionFactory) : AdamantConnectionManager {\n    const injector = Injector.create({\n        providers: [\n            { provide: ADAMANT_CONNECTION_FACTORY, useValue: factory },\n            { provide: AdamantConnectionManager, deps: [ ADAMANT_CONNECTION_FACTORY, ADAMANT_ID, Injector ] },\n            { provide: ADAMANT_ID, useFactory: adamantIdFactory, deps: [] },\n            { provide: ADAMANT_EQUAL_CHECKER, useFactory: equalCheckerFactory, deps: [] }\n        ]\n    });\n\n    return injector.get(AdamantConnectionManager);\n}\n\n@Injectable()\nexport class AdamantConnectionManager {\n    \n    protected readonly connections = new Map<string, PouchDB.Database<any>>();\n    protected readonly repositories = new Map<Ctor<any>, AdamantRepository<any>>();\n    protected readonly metadata = new Map<Ctor<any>, Metadata<any>>();\n    \n    constructor(@Inject(ADAMANT_CONNECTION_FACTORY) protected readonly connectionFactory : ConnectionFactory,\n                @Inject(ADAMANT_ID) public readonly id : AdamantId,\n                protected readonly injector : Injector) {}\n    \n    getOpenConnections() : PouchDB.Database[] {\n        return Array.from(this.connections.values());\n    }\n    \n    getConnection<T extends {} = {}>(name : string) : PouchDB.Database<T> {\n        if(!this.connections.has(name)) {\n            this.connections.set(name, this.createConnection(name));\n        }\n        \n        return this.connections.get(name)!;\n    }\n    \n    clearConnections() {\n        this.connections.clear();\n    }\n    \n    protected createConnection(name : string) : PouchDB.Database {\n        return this.connectionFactory(name);\n    }\n    \n    getRepository<T>(entityClass : Ctor<T>) : AdamantRepository<T> {\n        if(!this.repositories.has(entityClass)) {\n            this.repositories.set(entityClass, this.createRepository(entityClass));\n        }\n        \n        return this.repositories.get(entityClass)!;\n    }\n    \n    protected createRepository<T>(entityClass : Ctor<T>) : AdamantRepository<T> {\n        const metadata = this.getMetadata(entityClass);\n        \n        return Injector.create({\n            parent: this.injector,\n            providers: [\n                { provide: AdamantConnectionManager, useValue: this },\n                { provide: AdamantRepository, deps: [ ADAMANT_CONNECTION, ADAMANT_ENTITY_CLASS, ADAMANT_ENTITY_METADATA, ADAMANT_EQUAL_CHECKER, ADAMANT_ID, Bulk, Hydrator, Validator] },\n                { provide: ADAMANT_ENTITY_CLASS, useValue: entityClass },\n                { provide: ADAMANT_ENTITY_METADATA, useValue: metadata, },\n                { provide: ADAMANT_CONNECTION, useValue: !metadata.inline ? this.getConnection(metadata.name!) : null },\n                { provide: HydratorImpl, deps: [ ADAMANT_ID, AdamantConnectionManager] },\n                { provide: ValidatorImpl, deps: [] },\n                { provide: Hydrator, useExisting: metadata.hydrator || HydratorImpl },\n                { provide: Validator, useExisting: metadata.validator || ValidatorImpl },\n                { provide: Bulk, deps: [ ADAMANT_CONNECTION, ADAMANT_ENTITY_CLASS, ADAMANT_ENTITY_METADATA, Hydrator, Validator ] }\n            ]\n        }).get<AdamantRepository<T>>(AdamantRepository);\n    }\n    \n    getMetadata<T>(entityClass : Ctor<T>) : Metadata<T> {\n        if(!this.metadata.has(entityClass)) {\n            this.metadata.set(entityClass, this.createMetadata(entityClass));\n        }\n        \n        return this.metadata.get(entityClass)!;\n    }\n    \n    protected createMetadata<T>(entityClass : Ctor<T>) : Metadata<T> {\n        return new Metadata<T>(entityClass);\n    }\n}\n"]}